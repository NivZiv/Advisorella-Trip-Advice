{"ast":null,"code":"var _jsxFileName = \"/Users/daniellamizrahi/repos/traveladvisor/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { CssBaseline, Grid } from '@material-ui/core';\nimport { getPlacesData, getWeatherData } from './api/travelAdvisorAPI';\nimport Header from './components/Header/Header';\nimport List from './components/List/List';\nimport Map from './components/Map/Map';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [type, setType] = useState('hotels');\n  const [rating, setRating] = useState('');\n  const [coords, setCoords] = useState({});\n  const [bounds, setBounds] = useState(null);\n  const [weatherData, setWeatherData] = useState([]);\n  const [filteredPlaces, setFilteredPlaces] = useState([]);\n  const [places, setPlaces] = useState([]);\n  const [autocomplete, setAutocomplete] = useState(null);\n  const [childClicked, setChildClicked] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(_ref => {\n      let {\n        coords: {\n          latitude,\n          longitude\n        }\n      } = _ref;\n      setCoords({\n        lat: latitude,\n        lng: longitude\n      });\n    });\n  }, []);\n  useEffect(() => {\n    const filtered = places.filter(place => Number(place.rating) > rating);\n    setFilteredPlaces(filtered);\n  }, [rating]);\n  useEffect(() => {\n    if (bounds) {\n      setIsLoading(true);\n      getWeatherData(coords.lat, coords.lng).then(data => setWeatherData(data));\n      getPlacesData(type, bounds.sw, bounds.ne).then(data => {\n        setPlaces(data.filter(place => place.name && place.num_reviews > 0));\n        setFilteredPlaces([]);\n        setRating('');\n        setIsLoading(false);\n      });\n    }\n  }, [bounds, type]);\n\n  const onLoad = autoC => setAutocomplete(autoC);\n\n  const onPlaceChanged = () => {\n    const lat = autocomplete.getPlace().geometry.location.lat();\n    const lng = autocomplete.getPlace().geometry.location.lng();\n    setCoords({\n      lat,\n      lng\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(CssBaseline, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Header, {\n      onPlaceChanged: onPlaceChanged,\n      onLoad: onLoad\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 3,\n      style: {\n        width: '100%'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 4,\n        children: /*#__PURE__*/_jsxDEV(Map, {\n          setChildClicked: setChildClicked,\n          setBounds: setBounds,\n          setCoords: setCoords,\n          coords: coords,\n          places: filteredPlaces.length ? filteredPlaces : places,\n          weatherData: weatherData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 8,\n        style: {\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(List, {\n          isLoading: isLoading,\n          childClicked: childClicked,\n          places: filteredPlaces.length ? filteredPlaces : places,\n          type: type,\n          setType: setType,\n          rating: rating,\n          setRating: setRating\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(App, \"4x1IUR/xYgU4kJQXKI8XsghVwzI=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/daniellamizrahi/repos/traveladvisor/src/App.js"],"names":["React","useState","useEffect","CssBaseline","Grid","getPlacesData","getWeatherData","Header","List","Map","App","type","setType","rating","setRating","coords","setCoords","bounds","setBounds","weatherData","setWeatherData","filteredPlaces","setFilteredPlaces","places","setPlaces","autocomplete","setAutocomplete","childClicked","setChildClicked","isLoading","setIsLoading","navigator","geolocation","getCurrentPosition","latitude","longitude","lat","lng","filtered","filter","place","Number","then","data","sw","ne","name","num_reviews","onLoad","autoC","onPlaceChanged","getPlace","geometry","location","width","length","display","justifyContent","alignItems"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { CssBaseline, Grid } from '@material-ui/core';\n\nimport { getPlacesData, getWeatherData } from './api/travelAdvisorAPI';\nimport Header from './components/Header/Header';\nimport List from './components/List/List';\nimport Map from './components/Map/Map';\n\nconst App = () => {\n  const [type, setType] = useState('hotels');\n  const [rating, setRating] = useState('');\n\n  const [coords, setCoords] = useState({});\n  const [bounds, setBounds] = useState(null);\n\n  const [weatherData, setWeatherData] = useState([]);\n  const [filteredPlaces, setFilteredPlaces] = useState([]);\n  const [places, setPlaces] = useState([]);\n\n  const [autocomplete, setAutocomplete] = useState(null);\n  const [childClicked, setChildClicked] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(({ coords: { latitude, longitude } }) => {\n      setCoords({ lat: latitude, lng: longitude });\n    });\n  }, []);\n\n  useEffect(() => {\n    const filtered = places.filter((place) => Number(place.rating) > rating);\n\n    setFilteredPlaces(filtered);\n  }, [rating]);\n\n  useEffect(() => {\n    if (bounds) {\n      setIsLoading(true);\n\n      getWeatherData(coords.lat, coords.lng)\n        .then((data) => setWeatherData(data));\n\n      getPlacesData(type, bounds.sw, bounds.ne)\n        .then((data) => {\n          setPlaces(data.filter((place) => place.name && place.num_reviews > 0));\n          setFilteredPlaces([]);\n          setRating('');\n          setIsLoading(false);\n        });\n    }\n  }, [bounds, type]);\n\n  const onLoad = (autoC) => setAutocomplete(autoC);\n\n  const onPlaceChanged = () => {\n    const lat = autocomplete.getPlace().geometry.location.lat();\n    const lng = autocomplete.getPlace().geometry.location.lng();\n\n    setCoords({ lat, lng });\n  };\n\n  return (\n    <>\n      <CssBaseline />\n      <Header onPlaceChanged={onPlaceChanged} onLoad={onLoad} />\n      <Grid container spacing={3} style={{ width: '100%' }}>\n        <Grid item xs={12} md={4}>\n        <Map\n            setChildClicked={setChildClicked}\n            setBounds={setBounds}\n            setCoords={setCoords}\n            coords={coords}\n            places={filteredPlaces.length ? filteredPlaces : places}\n            weatherData={weatherData}\n          />          \n        </Grid>\n        <Grid item xs={12} md={8} style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n        <List\n            isLoading={isLoading}\n            childClicked={childClicked}\n            places={filteredPlaces.length ? filteredPlaces : places}\n            type={type}\n            setType={setType}\n            rating={rating}\n            setRating={setRating}\n          />\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}